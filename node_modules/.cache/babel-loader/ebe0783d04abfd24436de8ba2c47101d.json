{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/phipson/Documents/GitProjects/phipson.github.io/webv5/src/App.js\";\nimport './style.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport LandingPage from './components/Landing';\nimport NavigationBar from './components/NavigationBar';\nimport ProjectCatalogue from './components/ProjectCatalogue';\nimport AboutPage from './components/About';\nimport NavigationMenuPage from './components/NavigationMenu';\nimport XRProjectList from './components/XRProjectList';\nimport UXProjectList from './components/UXProjectList';\nimport SWProjectList from './components/SWProjectList';\nimport $ from 'jquery';\nimport gsap from \"gsap\";\nimport { TweenMax } from 'gsap/all';\nconst ProjectCatalogueList = [XRProjectList, UXProjectList, SWProjectList]; // TODO: Based on PageID fetch the corresponding projects\n\nconst NavHeader = [\"Mixed Reality\", \"Design Technologist\", \"Software Development\"];\nconst LinkNames = [\"mixed_reality\", \"design_technologist\", \"software_development\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transitionComplete: false,\n      pageID: 0,\n      // FOR LANDING PAGE (By default, black for nothing)\n      siteState: 0,\n      // FOR NAVIGATION\n      headerText: \"\",\n      // FOR NAVIGATION DISPLAY (SYSTEM STATUS)\n      displayPage: {},\n      // BASED ON CLICKED PROJECT CATALOGUE PAGE\n      // FOR NAVIGATION PAGE\n      navHamburger: \"About\",\n      navHamburgerClick: () => {\n        this.setSiteState(3);\n      },\n      navOpen: false,\n      // FOR PROJECTS\n      projectList: ProjectCatalogueList[0]\n    };\n    this.setSiteState = this.setSiteState.bind(this);\n    this.fadeIntoNewState = this.fadeIntoNewState.bind(this);\n    this.changePageIDState = this.changePageIDState.bind(this);\n    this.viewDetails = this.viewDetails.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.toggleNavigationMenu = this.toggleNavigationMenu.bind(this);\n  } // Helper function that is called when the transition is happening to ensure that \n  // If the user clicked on the dot in the side navigation bar\n  // While the page is scrolling, the side carousel dot scrolling is disabled (preventing unnecessary scroll animations)\n\n\n  handleColorChange() {\n    this.setState(() => ({\n      transitionComplete: true\n    }));\n  }\n  /**\n   * Helper function to switch to a new page\n   * @param {Number} newState New index in the siteMap var to switch screens\n   */\n\n\n  setSiteState(newState) {\n    let oldState = this.state.siteState;\n\n    switch (oldState) {\n      // Fade out home page\n      case 0:\n        gsap.to($(\".LandingWrapper\"), {\n          css: {\n            opacity: 0\n          },\n          duration: 0.25,\n          onComplete: () => {\n            this.fadeIntoNewState(newState, oldState);\n          }\n        });\n        break;\n\n      case 1:\n        if (newState === 0) {\n          gsap.to($(\".ProjectCatalogueWrapper\"), {\n            css: {\n              opacity: 0\n            },\n            duration: 0.25,\n            onComplete: () => {\n              this.fadeIntoNewState(newState, oldState);\n            }\n          });\n        } else {\n          this.fadeIntoNewState(newState, oldState);\n        }\n\n        break;\n\n      case 2:\n        gsap.to($(\".ProjectDetailWrapper\"), {\n          css: {\n            opacity: 0\n          },\n          duration: 0.25,\n          onComplete: () => {\n            this.fadeIntoNewState(newState, oldState);\n          }\n        });\n        break;\n\n      case 3:\n        gsap.to($(\".AboutWrapper\"), {\n          css: {\n            opacity: 0\n          },\n          duration: 0.25,\n          onComplete: () => {\n            this.fadeIntoNewState(newState, oldState);\n          }\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n  /**\n   * Helper function called after the animation is complete to switch the state of the web app\n   * Helps reset the states between the pages \n   * @param {Number} newState New index in the siteMap var to switch screens\n   * @param {Number} oldState Previous state that we are switching from\n   */\n\n\n  fadeIntoNewState(newState, oldState) {\n    // Set all the screens to have opacity 0\n    if (newState !== 2) {\n      gsap.set($(\".LandingWrapper,.ProjectCatalogueWrapper,.ProjectDetailWrapper\"), {\n        css: {\n          opacity: 0\n        }\n      });\n    }\n\n    if (oldState === 2) {\n      this.setState(() => ({\n        displayPage: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 22\n        }, this)\n      }));\n    }\n\n    this.setState(() => ({\n      siteState: newState,\n      navHamburgerClick: newState === 0 ? () => {\n        this.setSiteState(3);\n      } : () => {\n        this.toggleNavigationMenu(!this.state.navOpen);\n      }\n    }), () => {\n      switch (newState) {\n        case 0:\n          this.setState(() => ({\n            headerText: \"\"\n          }), () => {\n            this.navChild.changeLogoButton(\"Phipson\", () => {\n              this.setSiteState(0);\n            }, \"/\");\n            this.navChild.changeTitleText(this.state.headerText);\n          });\n          gsap.to($(\".LandingWrapper\"), {\n            css: {\n              opacity: 1\n            },\n            duration: 0.25\n          });\n          break;\n\n        case 1:\n          this.setState(() => ({\n            headerText: NavHeader[this.state.pageID]\n          }), () => {\n            this.navChild.changeLogoButton(\"Phipson\", () => {\n              this.setSiteState(0);\n            }, \"/\");\n            this.navChild.changeTitleText(this.state.headerText);\n          });\n          gsap.to($(\".ProjectCatalogueWrapper\"), {\n            css: {\n              opacity: 1\n            },\n            duration: 0.25\n          });\n          break;\n\n        case 2:\n          gsap.to($(\".ProjectDetailWrapper\"), {\n            css: {\n              opacity: 1\n            },\n            duration: 0.25\n          });\n          gsap.to($(\".ScrollArrowDown\"), {\n            css: {\n              opacity: 1\n            },\n            duration: 0.25\n          });\n          gsap.timeline({\n            scrollTrigger: {\n              trigger: \".ProjDet-TitleWrapper\",\n              start: \"10% top\",\n              end: \"20% top\",\n              scrub: true\n            }\n          }).to($(\".ScrollArrowDown\"), {\n            css: {\n              opacity: 0\n            },\n            duration: 0.25\n          });\n          gsap.timeline({\n            yoyo: true,\n            repeat: -1\n          }).to($(\".ScrollArrowDown\"), {\n            css: {\n              y: \"-=10\"\n            },\n            duration: 1,\n            ease: \"Power1.easeInOut\"\n          });\n          break;\n\n        case 3:\n          this.setState(() => ({\n            headerText: \"\"\n          }), () => {\n            this.navChild.changeTitleText(this.state.headerText);\n          });\n          gsap.to($(\".AboutWrapper\"), {\n            css: {\n              opacity: 1\n            },\n            duration: 0.25\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      this.navChild.changeHamburger(newState !== 0 ? HamburgerMenu : \"About\");\n      if (this.state.navOpen) this.toggleNavigationMenu(false);\n    });\n  }\n  /**\n   * Changing the CSS and types of information that will be shown in the Project Catalogue page \n   * (depending on which type of projects the user wants to see)\n   * @param {Number} newPageID The new index of projects to show from the ProjectCatalogueList\n   */\n\n\n  changePageIDState(newPageID) {\n    if (newPageID < 0) newPageID = 2;else if (newPageID > 2) newPageID = 0;\n    console.log(\"Changing pageID to: \", newPageID);\n    this.setState(() => ({\n      pageID: newPageID % 3,\n      projectList: ProjectCatalogueList[newPageID % 3]\n    }), () => {\n      if (this.state.siteState === 0) {\n        this.child.child.swapTimeline(this.state.pageID);\n      } else {\n        // By default, we execute this if we are not on the home page\n        switch (this.state.pageID) {\n          case 0:\n            TweenMax.to($(\"body\"), 0.25, {\n              css: {\n                background: \"linear-gradient(111.2deg, #7C67E4 0%, #4D33CC 100.5%)\"\n              }\n            });\n            TweenMax.to($(\"h1\").add(\"h2\").add(\"h3\").add(\"h4\").add(\"h5\").add(\"h6\").add(\"div\"), 0.25, {\n              css: {\n                color: \"white\"\n              }\n            });\n            break;\n\n          case 1:\n            TweenMax.to($(\"body\"), 0.25, {\n              css: {\n                background: \"linear-gradient(111.2deg, #2258C3 0%, #1F3D7A 100.5%)\"\n              }\n            });\n            TweenMax.to($(\"h1\").add(\"h2\").add(\"h3\").add(\"h4\").add(\"h5\").add(\"h6\").add(\"div\"), 0.25, {\n              css: {\n                color: \"white\"\n              }\n            });\n            break;\n\n          case 2:\n            TweenMax.to($(\"body\"), 0.25, {\n              css: {\n                background: \"linear-gradient(111.2deg, #26734C 0%, #244233 100.5%)\"\n              }\n            });\n            TweenMax.to($(\"h1\").add(\"h2\").add(\"h3\").add(\"h4\").add(\"h5\").add(\"h6\").add(\"div\"), 0.25, {\n              css: {\n                color: \"white\"\n              }\n            });\n            break;\n        }\n      }\n\n      console.log(this.state.projectList);\n    });\n  }\n  /**\n   * Sets the new project detail page to show when we click on \"view details\"\n   * @param {*} displayPage JSX element that will be displayed when the user clicks on the corresponding \"view details\"\n   */\n\n\n  viewDetails(displayPage) {\n    console.log(\"Displaying page: \", displayPage);\n    this.setState(() => ({\n      displayPage: displayPage,\n      headerText: displayPage.name\n    }), () => {\n      this.navChild.changeLogoButton(\"← Projects\", () => {\n        this.setSiteState(1);\n      }, `/${LinkNames[this.state.pageID]}`);\n      this.navChild.changeTitleText(this.state.headerText);\n      this.setSiteState(2);\n    });\n  }\n  /**\n   * Toggles a Navigation Menu that will be displayed in front of the existing page to navigate between screens\n   * @param {*} open Boolean indicating whether we want the navigation menu to open or close\n   */\n\n\n  toggleNavigationMenu(open) {\n    this.setState(() => ({\n      navOpen: open\n    }), () => {\n      if (open) {\n        switch (this.state.siteState) {\n          case 0:\n            gsap.to($(\".LandingWrapper\"), {\n              css: {\n                opacity: 0\n              },\n              duration: 0.25\n            });\n            break;\n\n          case 1:\n            gsap.to($(\".ProjectCatalogueWrapper\"), {\n              css: {\n                opacity: 0\n              },\n              duration: 0.25\n            });\n            break;\n\n          case 2:\n            gsap.to($(\".ProjectDetailWrapper\"), {\n              css: {\n                opacity: 0\n              },\n              duration: 0.25\n            });\n            break;\n\n          case 3:\n            gsap.to($(\".AboutWrapper\"), {\n              css: {\n                opacity: 0\n              },\n              duration: 0.25\n            });\n            break;\n\n          default:\n            break;\n        }\n\n        gsap.set($(\".HamburgerMenuWrapper\"), {\n          css: {\n            display: \"grid\"\n          }\n        });\n        gsap.to($(\".HamburgerMenuWrapper\"), {\n          css: {\n            opacity: 1\n          },\n          duration: 0.25\n        });\n      } else {\n        switch (this.state.siteState) {\n          case 0:\n            gsap.to($(\".LandingWrapper\"), {\n              css: {\n                opacity: 1\n              },\n              duration: 0.25\n            });\n            break;\n\n          case 1:\n            gsap.to($(\".ProjectCatalogueWrapper\"), {\n              css: {\n                opacity: 1\n              },\n              duration: 0.25\n            });\n            break;\n\n          case 2:\n            gsap.to($(\".ProjectDetailWrapper\"), {\n              css: {\n                opacity: 1\n              },\n              duration: 0.25\n            });\n            break;\n\n          case 3:\n            gsap.to($(\".AboutWrapper\"), {\n              css: {\n                opacity: 1\n              },\n              duration: 0.25\n            });\n            break;\n\n          default:\n            break;\n        }\n\n        gsap.to($(\".HamburgerMenuWrapper\"), {\n          css: {\n            opacity: 0\n          },\n          duration: 0.25,\n          onComplete: () => {\n            gsap.set($(\".HamburgerMenuWrapper\"), {\n              css: {\n                display: \"none\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    // Dictionary that maps this.state.siteState with the actual page that we want to show\n    let siteMap = {\n      0: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(LandingPage, {\n          pageID: this.state.pageID,\n          onChange: this.changePageIDState,\n          onRef: ref => this.child = ref,\n          onViewProject: () => {\n            this.setSiteState(1);\n          },\n          transitionComplete: this.state.transitionComplete,\n          onInit: this.handleColorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 10\n      }, this),\n      1: /*#__PURE__*/_jsxDEV(Route, {\n        path: `/${LinkNames[this.state.pageID]}`,\n        children: /*#__PURE__*/_jsxDEV(ProjectCatalogue, {\n          viewDetails: this.viewDetails,\n          projectList: this.state.projectList,\n          pageID: this.state.pageID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 10\n      }, this),\n      2: /*#__PURE__*/_jsxDEV(Route, {\n        path: `/${LinkNames[this.state.pageID]}/${this.state.displayPage.link}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ProjectDetailWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ProjDet-TitleWrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ProjectElementText\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"ProjectWhiteText\",\n                children: this.state.headerText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"ProjectSubtitle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"ProjectButtonText\",\n                style: {\n                  cursor: \"unset\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ProjectElementSVG\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ProjectWhiteText ScrollArrowDown\",\n            children: \"\\u2193\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), this.state.displayPage.page]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 10\n      }, this),\n      3: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        children: /*#__PURE__*/_jsxDEV(AboutPage, {\n          transitionComplete: this.state.transitionComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 10\n      }, this)\n    };\n    return /*#__PURE__*/_jsxDEV(HashRouter, {\n      basename: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavigationBar, {\n          title: this.state.headerText,\n          nav: this.state.navHamburger,\n          navClick: this.state.navHamburgerClick,\n          onChange: () => {\n            this.setSiteState(0);\n          },\n          onRef: ref => {\n            this.navChild = ref;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), this.state.navOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100%\",\n            minHeight: \"100vh\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 33\n        }, this) : siteMap[this.state.siteState], /*#__PURE__*/_jsxDEV(NavigationMenuPage, {\n          currentPageID: this.state.pageID,\n          changePageIDState: this.changePageIDState,\n          setSiteState: this.setSiteState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/phipson/Documents/GitProjects/phipson.github.io/webv5/src/App.js"],"names":["HashRouter","Route","React","Component","LandingPage","NavigationBar","ProjectCatalogue","AboutPage","NavigationMenuPage","XRProjectList","UXProjectList","SWProjectList","$","gsap","TweenMax","ProjectCatalogueList","NavHeader","LinkNames","App","constructor","props","state","transitionComplete","pageID","siteState","headerText","displayPage","navHamburger","navHamburgerClick","setSiteState","navOpen","projectList","bind","fadeIntoNewState","changePageIDState","viewDetails","handleColorChange","toggleNavigationMenu","setState","newState","oldState","to","css","opacity","duration","onComplete","set","navChild","changeLogoButton","changeTitleText","timeline","scrollTrigger","trigger","start","end","scrub","yoyo","repeat","y","ease","changeHamburger","HamburgerMenu","newPageID","console","log","child","swapTimeline","background","add","color","name","open","display","render","siteMap","ref","link","cursor","page","width","minHeight"],"mappings":"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","sourcesContent":["import './style.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport React, {Component} from 'react';\n\nimport LandingPage from './components/Landing';\nimport NavigationBar from './components/NavigationBar';\nimport ProjectCatalogue from './components/ProjectCatalogue';\nimport AboutPage from './components/About';\nimport NavigationMenuPage from './components/NavigationMenu';\n\nimport XRProjectList from './components/XRProjectList';\nimport UXProjectList from './components/UXProjectList';\nimport SWProjectList from './components/SWProjectList';\n\nimport $ from 'jquery';\nimport gsap from \"gsap\";\nimport { TweenMax } from 'gsap/all';\n\n\nconst ProjectCatalogueList = [XRProjectList, UXProjectList, SWProjectList]; // TODO: Based on PageID fetch the corresponding projects\nconst NavHeader = [\"Mixed Reality\", \"Design Technologist\", \"Software Development\"];\nconst LinkNames = [\"mixed_reality\", \"design_technologist\", \"software_development\"]\n\nclass App extends Component{\n  constructor (props) {\n    super(props);\n    this.state = {\n      transitionComplete: false,\n      pageID: 0, // FOR LANDING PAGE (By default, black for nothing)\n      siteState: 0, // FOR NAVIGATION\n      headerText: \"\",  // FOR NAVIGATION DISPLAY (SYSTEM STATUS)\n      displayPage: {}, // BASED ON CLICKED PROJECT CATALOGUE PAGE\n\n      // FOR NAVIGATION PAGE\n      navHamburger: \"About\",\n      navHamburgerClick: () => {this.setSiteState(3)},\n      navOpen: false,\n\n      // FOR PROJECTS\n      projectList: ProjectCatalogueList[0],\n    }\n\n    this.setSiteState = this.setSiteState.bind(this);\n    this.fadeIntoNewState = this.fadeIntoNewState.bind(this);\n    this.changePageIDState = this.changePageIDState.bind(this);\n    this.viewDetails = this.viewDetails.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.toggleNavigationMenu = this.toggleNavigationMenu.bind(this);\n  }\n\n  // Helper function that is called when the transition is happening to ensure that \n  // If the user clicked on the dot in the side navigation bar\n  // While the page is scrolling, the side carousel dot scrolling is disabled (preventing unnecessary scroll animations)\n  handleColorChange() {\n    this.setState(() => ({\n      transitionComplete: true,\n    }))\n  }\n\n  /**\n   * Helper function to switch to a new page\n   * @param {Number} newState New index in the siteMap var to switch screens\n   */\n  setSiteState(newState) {\n    let oldState = this.state.siteState;\n    switch (oldState) {\n      // Fade out home page\n      case 0:\n        gsap.to($(\".LandingWrapper\"), {css: {opacity: 0}, duration: 0.25,\n        onComplete: () => {this.fadeIntoNewState(newState, oldState)}});\n        break;\n\n      case 1:\n        if (newState === 0) {\n          gsap.to($(\".ProjectCatalogueWrapper\"), {css: {opacity: 0}, duration: 0.25,\n          onComplete: () => {this.fadeIntoNewState(newState, oldState)}});\n        }\n        else {\n          this.fadeIntoNewState(newState, oldState);\n        }\n        break;\n\n      case 2:\n        gsap.to($(\".ProjectDetailWrapper\"), {css: {opacity: 0}, duration: 0.25,\n        onComplete: () => {this.fadeIntoNewState(newState, oldState)}});\n        break;\n\n      case 3:\n        gsap.to($(\".AboutWrapper\"), {css: {opacity: 0}, duration: 0.25,\n        onComplete: () => {this.fadeIntoNewState(newState, oldState)}});\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Helper function called after the animation is complete to switch the state of the web app\n   * Helps reset the states between the pages \n   * @param {Number} newState New index in the siteMap var to switch screens\n   * @param {Number} oldState Previous state that we are switching from\n   */\n  fadeIntoNewState(newState, oldState) {\n    // Set all the screens to have opacity 0\n    if (newState !== 2) {\n      gsap.set($(\".LandingWrapper,.ProjectCatalogueWrapper,.ProjectDetailWrapper\"), {css: {opacity: 0}});\n    }\n\n    if (oldState === 2) {\n      this.setState(() => ({\n        displayPage: <div></div>\n      }))\n    }\n\n    this.setState(() => ({\n      siteState: newState,\n      navHamburgerClick: newState === 0 ? () => {this.setSiteState(3)} : () => {this.toggleNavigationMenu(!this.state.navOpen)}\n    }), () => {\n\n      switch (newState) {\n        case 0:\n          this.setState(() => ({\n            headerText: \"\"\n          }), () => {\n            this.navChild.changeLogoButton(\"Phipson\", () => {this.setSiteState(0)}, \"/\")\n            this.navChild.changeTitleText(this.state.headerText);\n          });\n          gsap.to($(\".LandingWrapper\"), {css: {opacity: 1}, duration: 0.25});\n          break;\n\n        case 1:\n          this.setState(() => ({\n            headerText: NavHeader[this.state.pageID]\n          }), () => {\n            this.navChild.changeLogoButton(\"Phipson\", () => {this.setSiteState(0)}, \"/\")\n            this.navChild.changeTitleText(this.state.headerText);\n          })\n          gsap.to($(\".ProjectCatalogueWrapper\"), {css: {opacity: 1}, duration: 0.25});\n          break;\n\n        case 2:\n          gsap.to($(\".ProjectDetailWrapper\"), {css: {opacity: 1}, duration: 0.25});\n          gsap.to($(\".ScrollArrowDown\"), {css: {opacity: 1}, duration: 0.25});\n\n          gsap.timeline({\n            scrollTrigger: {\n              trigger: \".ProjDet-TitleWrapper\",\n              start: \"10% top\",\n              end: \"20% top\",\n              scrub: true\n            }}\n          ).to($(\".ScrollArrowDown\"), {css: {opacity: 0}, duration: 0.25});\n\n          gsap.timeline({yoyo: true, repeat: -1}).to($(\".ScrollArrowDown\"), {css: {y: \"-=10\"}, duration: 1, ease: \"Power1.easeInOut\"})\n          break;\n\n        case 3:\n          this.setState(() => ({\n            headerText: \"\"\n          }), () => {\n            this.navChild.changeTitleText(this.state.headerText);\n          })\n          gsap.to($(\".AboutWrapper\"), {css: {opacity: 1}, duration: 0.25});\n          break;\n\n        default:\n          break;\n      }\n\n      this.navChild.changeHamburger(newState !== 0 ? HamburgerMenu : \"About\");\n      if (this.state.navOpen)\n        this.toggleNavigationMenu(false);\n    });\n  }\n\n  /**\n   * Changing the CSS and types of information that will be shown in the Project Catalogue page \n   * (depending on which type of projects the user wants to see)\n   * @param {Number} newPageID The new index of projects to show from the ProjectCatalogueList\n   */\n  changePageIDState(newPageID) {\n    if (newPageID < 0)\n      newPageID = 2;\n    else if (newPageID > 2)\n      newPageID = 0;\n\n    console.log(\"Changing pageID to: \", newPageID);\n    this.setState(() => ({\n      pageID: newPageID%3,\n      projectList: ProjectCatalogueList[newPageID%3]\n    }), () => {\n      if (this.state.siteState === 0) {\n        this.child.child.swapTimeline(this.state.pageID);\n      }\n      else {\n          // By default, we execute this if we are not on the home page\n          switch(this.state.pageID) {\n              case 0:\n                  TweenMax.to($(\"body\"), 0.25, {css:{background: \"linear-gradient(111.2deg, #7C67E4 0%, #4D33CC 100.5%)\"}});\n                  TweenMax.to($(\"h1\").add(\"h2\").add(\"h3\").add(\"h4\").add(\"h5\").add(\"h6\").add(\"div\"), 0.25, {css: {color: \"white\"}});\n                  break;\n  \n              case 1:\n                  TweenMax.to($(\"body\"), 0.25, {css:{background: \"linear-gradient(111.2deg, #2258C3 0%, #1F3D7A 100.5%)\"}});\n                  TweenMax.to($(\"h1\").add(\"h2\").add(\"h3\").add(\"h4\").add(\"h5\").add(\"h6\").add(\"div\"), 0.25, {css: {color: \"white\"}});\n                  break;\n  \n              case 2:\n                  TweenMax.to($(\"body\"), 0.25, {css:{background: \"linear-gradient(111.2deg, #26734C 0%, #244233 100.5%)\"}});\n                  TweenMax.to($(\"h1\").add(\"h2\").add(\"h3\").add(\"h4\").add(\"h5\").add(\"h6\").add(\"div\"), 0.25, {css: {color: \"white\"}});\n                  break;\n          }\n      }\n\n      console.log(this.state.projectList)\n    });\n  }\n\n  /**\n   * Sets the new project detail page to show when we click on \"view details\"\n   * @param {*} displayPage JSX element that will be displayed when the user clicks on the corresponding \"view details\"\n   */\n  viewDetails(displayPage) {\n    console.log(\"Displaying page: \", displayPage);\n    this.setState(() => ({\n      displayPage: displayPage,\n      headerText: displayPage.name\n    }), () => {\n      this.navChild.changeLogoButton(\"← Projects\", () => {this.setSiteState(1)}, `/${LinkNames[this.state.pageID]}`)\n      this.navChild.changeTitleText(this.state.headerText);\n      this.setSiteState(2)\n    });\n  }\n\n  /**\n   * Toggles a Navigation Menu that will be displayed in front of the existing page to navigate between screens\n   * @param {*} open Boolean indicating whether we want the navigation menu to open or close\n   */\n  toggleNavigationMenu(open) {\n    this.setState(() => ({\n      navOpen: open,\n    }), () => {\n      if (open) {\n        switch (this.state.siteState) {\n          case 0:\n            gsap.to($(\".LandingWrapper\"), {css: {opacity: 0}, duration: 0.25});\n            break;\n  \n          case 1:\n            gsap.to($(\".ProjectCatalogueWrapper\"), {css: {opacity: 0}, duration: 0.25});\n            break;\n  \n          case 2:\n            gsap.to($(\".ProjectDetailWrapper\"), {css: {opacity: 0}, duration: 0.25});\n            break;\n  \n          case 3:\n            gsap.to($(\".AboutWrapper\"), {css: {opacity: 0}, duration: 0.25});\n            break;\n  \n          default:\n            break;\n        }\n  \n        gsap.set($(\".HamburgerMenuWrapper\"), {css: {display: \"grid\"}});\n        gsap.to($(\".HamburgerMenuWrapper\"), {css: {opacity: 1}, duration: 0.25});\n      }\n  \n      else {\n        switch (this.state.siteState) {\n          case 0:\n            gsap.to($(\".LandingWrapper\"), {css: {opacity: 1}, duration: 0.25});\n            break;\n  \n          case 1:\n            gsap.to($(\".ProjectCatalogueWrapper\"), {css: {opacity: 1}, duration: 0.25});\n            break;\n  \n          case 2:\n            gsap.to($(\".ProjectDetailWrapper\"), {css: {opacity: 1}, duration: 0.25});\n            break;\n  \n          case 3:\n            gsap.to($(\".AboutWrapper\"), {css: {opacity: 1}, duration: 0.25});\n            break;\n  \n          default:\n            break;\n        }\n  \n        gsap.to($(\".HamburgerMenuWrapper\"), {css: {opacity: 0}, duration: 0.25, onComplete: () => {\n          gsap.set($(\".HamburgerMenuWrapper\"), {css: {display: \"none\"}});\n        }})\n      }\n    })\n  }\n\n  render () {\n    // Dictionary that maps this.state.siteState with the actual page that we want to show\n    let siteMap = {\n      0: <Route path=\"/\">\n          <LandingPage pageID={this.state.pageID} \n                      onChange={this.changePageIDState} \n                      onRef={ref => (this.child = ref)}\n                      onViewProject={() => {this.setSiteState(1)}}\n                      transitionComplete={this.state.transitionComplete}\n                      onInit={this.handleColorChange}/>\n        </Route>,\n\n      1: <Route path={`/${LinkNames[this.state.pageID]}`}>\n          <ProjectCatalogue  viewDetails={this.viewDetails} \n                            projectList={this.state.projectList}\n                            pageID={this.state.pageID}/>\n          </Route>,\n      2: <Route path={`/${LinkNames[this.state.pageID]}/${this.state.displayPage.link}`}>\n          <div className=\"ProjectDetailWrapper\">\n            <div className=\"ProjDet-TitleWrapper\">\n                <div className=\"ProjectElementText\">\n                    <h2 className=\"ProjectWhiteText\">{this.state.headerText}</h2>\n                    <p className=\"ProjectSubtitle\"/>\n                    <button className=\"ProjectButtonText\" style={{cursor: \"unset\"}}/>\n                </div>\n                <div className=\"ProjectElementSVG\">\n                </div>\n            </div>\n            <p className=\"ProjectWhiteText ScrollArrowDown\">&#8595;</p>\n            {this.state.displayPage.page}\n          </div>\n        </Route>,\n      3: <Route path='/about'>\n          <AboutPage transitionComplete={this.state.transitionComplete}/>\n        </Route>,\n    };\n\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <NavigationBar  title={this.state.headerText} \n                          nav={this.state.navHamburger}\n                          navClick={this.state.navHamburgerClick}\n                          onChange={() => {this.setSiteState(0)}}\n                          onRef={(ref) => {this.navChild = ref}}/>\n          {this.state.navOpen ? <div style={{width: \"100%\", minHeight: \"100vh\"}}></div> : siteMap[this.state.siteState]}\n          <NavigationMenuPage currentPageID={this.state.pageID} \n                              changePageIDState={this.changePageIDState}\n                              setSiteState={this.setSiteState}/>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}