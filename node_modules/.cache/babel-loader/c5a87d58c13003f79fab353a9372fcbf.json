{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/phipson/Documents/GitProjects/phipson.github.io/webv5/src/App.js\";\nimport './style.css';\nimport { HashRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport LandingPage from './components/Landing';\nimport NavigationBar from './components/NavigationBar';\nimport ProjectCatalogue from './components/ProjectCatalogue';\nimport XRProjectList from './components/XRProjectList';\nimport UXProjectList from './components/UXProjectList';\nimport SWProjectList from './components/SWProjectList';\nconst ProjectCatalogueList = [XRProjectList, UXProjectList, SWProjectList]; // TODO: Based on PageID fetch the corresponding projects\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageID: 0,\n      // FOR LANDING PAGE\n      siteState: 2,\n      // FOR NAVIGATION\n      headerText: \"\",\n      // FOR NAVIGATION DISPLAY (SYSTEM STATUS)\n      displayPage: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }, this) // BASED ON CLICKED PROJECT CATALOGUE PAGE\n\n    };\n    this.setSiteState = this.setSiteState.bind(this);\n    this.changePageIDState = this.changePageIDState.bind(this);\n    this.viewDetails = this.viewDetails.bind(this);\n  }\n\n  setSiteState(newState) {\n    let oldState = this.state.siteState;\n    this.setState(() => ({\n      siteState: newState\n    }), () => {\n      if (oldState === 2) this.setState(() => ({\n        displayPage: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 71\n        }, this)\n      }));\n    });\n  }\n\n  changePageIDState(newPageID) {\n    if (newPageID < 0) newPageID = 2;else if (newPageID > 2) newPageID = 0;\n    console.log(\"Changing pageID to: \", newPageID);\n    this.setState(() => ({\n      pageID: newPageID % 3\n    }), () => {\n      if (this.state.siteState === 0) {\n        this.child.child.swapTimeline(this.state.pageID);\n      }\n    });\n  }\n\n  viewDetails(displayPage) {}\n\n  render() {\n    console.log(XRProjectList);\n    let siteMap = {\n      0: /*#__PURE__*/_jsxDEV(LandingPage, {\n        pageID: this.state.pageID,\n        onChange: this.changePageIDState,\n        onRef: ref => this.child = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 10\n      }, this),\n      1: /*#__PURE__*/_jsxDEV(ProjectCatalogue, {\n        viewDetails: this.viewDetails,\n        projectList: ProjectCatalogueList[this.state.pageID]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }, this),\n      2: XRProjectList.applelogic.page\n    };\n    return /*#__PURE__*/_jsxDEV(HashRouter, {\n      basename: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavigationBar, {\n          title: this.state.headerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), siteMap[this.state.siteState]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/phipson/Documents/GitProjects/phipson.github.io/webv5/src/App.js"],"names":["HashRouter","React","Component","LandingPage","NavigationBar","ProjectCatalogue","XRProjectList","UXProjectList","SWProjectList","ProjectCatalogueList","App","constructor","props","state","pageID","siteState","headerText","displayPage","setSiteState","bind","changePageIDState","viewDetails","newState","oldState","setState","newPageID","console","log","child","swapTimeline","render","siteMap","ref","applelogic","page"],"mappings":"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","sourcesContent":["import './style.css';\nimport { HashRouter } from 'react-router-dom';\nimport React, {Component} from 'react';\n\nimport LandingPage from './components/Landing';\nimport NavigationBar from './components/NavigationBar';\nimport ProjectCatalogue from './components/ProjectCatalogue';\n\nimport XRProjectList from './components/XRProjectList';\nimport UXProjectList from './components/UXProjectList';\nimport SWProjectList from './components/SWProjectList';\n\n\nconst ProjectCatalogueList = [XRProjectList, UXProjectList, SWProjectList]; // TODO: Based on PageID fetch the corresponding projects\n\nclass App extends Component{\n  constructor (props) {\n    super(props);\n    this.state = {\n      pageID: 0, // FOR LANDING PAGE\n      siteState: 2, // FOR NAVIGATION\n      headerText: \"\",  // FOR NAVIGATION DISPLAY (SYSTEM STATUS)\n      displayPage: <div></div>, // BASED ON CLICKED PROJECT CATALOGUE PAGE\n    }\n\n    this.setSiteState = this.setSiteState.bind(this);\n    this.changePageIDState = this.changePageIDState.bind(this);\n    this.viewDetails = this.viewDetails.bind(this);\n  }\n\n  setSiteState(newState) {\n    let oldState = this.state.siteState;\n    this.setState(() => ({\n      siteState: newState,\n    }), () => {if (oldState === 2) this.setState(() => ({displayPage: <div></div>}))\n    });\n  }\n\n  changePageIDState(newPageID) {\n    if (newPageID < 0)\n      newPageID = 2;\n    else if (newPageID > 2)\n      newPageID = 0;\n\n    console.log(\"Changing pageID to: \", newPageID);\n    this.setState(() => ({\n      pageID: newPageID%3\n    }), () => {\n      if (this.state.siteState === 0) {\n        this.child.child.swapTimeline(this.state.pageID);\n      }\n    });\n  }\n\n  viewDetails(displayPage) {\n    \n  }\n\n  render () {\n    console.log(XRProjectList);\n\n    let siteMap = {\n      0: <LandingPage pageID={this.state.pageID} onChange={this.changePageIDState} onRef={ref => (this.child = ref)}/>,\n      1: <ProjectCatalogue viewDetails={this.viewDetails} projectList={ProjectCatalogueList[this.state.pageID]}/>,\n      2: XRProjectList.applelogic.page\n    };\n\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <NavigationBar title={this.state.headerText}/>\n          {siteMap[this.state.siteState]}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}