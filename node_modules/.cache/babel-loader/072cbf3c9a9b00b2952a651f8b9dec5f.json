{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/phipson/Documents/GitProjects/phipson.github.io/webv5/src/App.js\";\nimport './style.css';\nimport { HashRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport LandingPage from './components/Landing';\nimport NavigationBar from './components/NavigationBar';\nimport ProjectCatalogue from './components/ProjectCatalogue';\nimport XRProjectList from './components/XRProjectList';\nimport UXProjectList from './components/UXProjectList';\nimport SWProjectList from './components/SWProjectList';\nconst ProjectCatalogueList = [XRProjectList, UXProjectList, SWProjectList]; // TODO: Based on PageID fetch the corresponding projects\n\nconst NavHeader = [\"Mixed Reality\", \"HCI Research\", \"Software Development\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transitionComplete: false,\n      pageID: 0,\n      // FOR LANDING PAGE (By default, black for nothing)\n      siteState: 0,\n      // FOR NAVIGATION\n      headerText: \"\",\n      // FOR NAVIGATION DISPLAY (SYSTEM STATUS)\n      displayPage: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 20\n      }, this) // BASED ON CLICKED PROJECT CATALOGUE PAGE\n\n    };\n    this.setSiteState = this.setSiteState.bind(this);\n    this.changePageIDState = this.changePageIDState.bind(this);\n    this.viewDetails = this.viewDetails.bind(this);\n  }\n\n  handleColorChange() {\n    this.setState(() => ({\n      transitionComplete: true\n    }));\n  }\n\n  setSiteState(newState) {\n    let oldState = this.state.siteState;\n    this.setState(() => ({\n      siteState: newState\n    }), () => {\n      if (oldState === 2) this.setState(() => ({\n        displayPage: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 44\n        }, this)\n      }));else if (newState === 1) this.setState(() => ({\n        headerText: NavHeader[this.state.pageID]\n      }));else if (newState === 0) this.setState(() => ({\n        headerText: \"\"\n      }));\n    });\n  }\n\n  changePageIDState(newPageID) {\n    if (newPageID < 0) newPageID = 2;else if (newPageID > 2) newPageID = 0;\n    console.log(\"Changing pageID to: \", newPageID);\n    this.setState(() => ({\n      pageID: newPageID % 3\n    }), () => {\n      if (this.state.siteState === 0) {\n        this.child.child.swapTimeline(this.state.pageID);\n      }\n    });\n  }\n\n  viewDetails(displayPage) {\n    console.log(\"Displaying page: \", displayPage);\n    this.setState(() => ({\n      displayPage: displayPage.page,\n      headerText: displayPage.name\n    }), this.setSiteState(2));\n  }\n\n  render() {\n    let siteMap = {\n      0: /*#__PURE__*/_jsxDEV(LandingPage, {\n        pageID: this.state.pageID,\n        onChange: this.changePageIDState,\n        onRef: ref => this.child = ref,\n        onViewProject: () => {\n          this.setSiteState(1);\n        },\n        transitionComplete: this.state.transitionComplete,\n        onInit: this.handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 10\n      }, this),\n      1: /*#__PURE__*/_jsxDEV(ProjectCatalogue, {\n        viewDetails: this.viewDetails,\n        projectList: ProjectCatalogueList[this.state.pageID],\n        pageID: this.state.pageID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 10\n      }, this),\n      2: this.state.displayPage\n    };\n    return /*#__PURE__*/_jsxDEV(HashRouter, {\n      basename: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavigationBar, {\n          title: this.state.headerText,\n          onChange: () => {\n            this.setSiteState(0);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), siteMap[this.state.siteState]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/phipson/Documents/GitProjects/phipson.github.io/webv5/src/App.js"],"names":["HashRouter","React","Component","LandingPage","NavigationBar","ProjectCatalogue","XRProjectList","UXProjectList","SWProjectList","ProjectCatalogueList","NavHeader","App","constructor","props","state","transitionComplete","pageID","siteState","headerText","displayPage","setSiteState","bind","changePageIDState","viewDetails","handleColorChange","setState","newState","oldState","newPageID","console","log","child","swapTimeline","page","name","render","siteMap","ref"],"mappings":";;AAAA,OAAO,aAAP;AACA,SAASA,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAGA,MAAMC,oBAAoB,GAAG,CAACH,aAAD,EAAgBC,aAAhB,EAA+BC,aAA/B,CAA7B,C,CAA4E;;AAC5E,MAAME,SAAS,GAAG,CAAC,eAAD,EAAkB,cAAlB,EAAkC,sBAAlC,CAAlB;;AAEA,MAAMC,GAAN,SAAkBT,SAAlB,CAA2B;AACzBU,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,kBAAkB,EAAE,KADT;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAEA;AACXC,MAAAA,SAAS,EAAE,CAHA;AAGG;AACdC,MAAAA,UAAU,EAAE,EAJD;AAIM;AACjBC,MAAAA,WAAW,eAAE;AAAA;AAAA;AAAA;AAAA,cALF,CAKe;;AALf,KAAb;AAQA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc,OAAO;AACnBV,MAAAA,kBAAkB,EAAE;AADD,KAAP,CAAd;AAGD;;AAEDK,EAAAA,YAAY,CAACM,QAAD,EAAW;AACrB,QAAIC,QAAQ,GAAG,KAAKb,KAAL,CAAWG,SAA1B;AACA,SAAKQ,QAAL,CAAc,OAAO;AACnBR,MAAAA,SAAS,EAAES;AADQ,KAAP,CAAd,EAEI,MAAM;AACR,UAAIC,QAAQ,KAAK,CAAjB,EACE,KAAKF,QAAL,CAAc,OAAO;AAACN,QAAAA,WAAW,eAAE;AAAA;AAAA;AAAA;AAAA;AAAd,OAAP,CAAd,EADF,KAEK,IAAIO,QAAQ,KAAK,CAAjB,EACH,KAAKD,QAAL,CAAc,OAAO;AAACP,QAAAA,UAAU,EAAER,SAAS,CAAC,KAAKI,KAAL,CAAWE,MAAZ;AAAtB,OAAP,CAAd,EADG,KAEA,IAAIU,QAAQ,KAAK,CAAjB,EACH,KAAKD,QAAL,CAAc,OAAO;AAACP,QAAAA,UAAU,EAAE;AAAb,OAAP,CAAd;AACH,KATD;AAUD;;AAEDI,EAAAA,iBAAiB,CAACM,SAAD,EAAY;AAC3B,QAAIA,SAAS,GAAG,CAAhB,EACEA,SAAS,GAAG,CAAZ,CADF,KAEK,IAAIA,SAAS,GAAG,CAAhB,EACHA,SAAS,GAAG,CAAZ;AAEFC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,SAApC;AACA,SAAKH,QAAL,CAAc,OAAO;AACnBT,MAAAA,MAAM,EAAEY,SAAS,GAAC;AADC,KAAP,CAAd,EAEI,MAAM;AACR,UAAI,KAAKd,KAAL,CAAWG,SAAX,KAAyB,CAA7B,EAAgC;AAC9B,aAAKc,KAAL,CAAWA,KAAX,CAAiBC,YAAjB,CAA8B,KAAKlB,KAAL,CAAWE,MAAzC;AACD;AACF,KAND;AAOD;;AAEDO,EAAAA,WAAW,CAACJ,WAAD,EAAc;AACvBU,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCX,WAAjC;AACA,SAAKM,QAAL,CAAc,OAAO;AACnBN,MAAAA,WAAW,EAAEA,WAAW,CAACc,IADN;AAEnBf,MAAAA,UAAU,EAAEC,WAAW,CAACe;AAFL,KAAP,CAAd,EAGI,KAAKd,YAAL,CAAkB,CAAlB,CAHJ;AAID;;AAEDe,EAAAA,MAAM,GAAI;AACR,QAAIC,OAAO,GAAG;AACZ,sBAAG,QAAC,WAAD;AAAa,QAAA,MAAM,EAAE,KAAKtB,KAAL,CAAWE,MAAhC;AACa,QAAA,QAAQ,EAAE,KAAKM,iBAD5B;AAEa,QAAA,KAAK,EAAEe,GAAG,IAAK,KAAKN,KAAL,GAAaM,GAFzC;AAGa,QAAA,aAAa,EAAE,MAAM;AAAC,eAAKjB,YAAL,CAAkB,CAAlB;AAAqB,SAHxD;AAIa,QAAA,kBAAkB,EAAE,KAAKN,KAAL,CAAWC,kBAJ5C;AAKa,QAAA,MAAM,EAAE,KAAKS;AAL1B;AAAA;AAAA;AAAA;AAAA,cADS;AAOZ,sBAAG,QAAC,gBAAD;AAAmB,QAAA,WAAW,EAAE,KAAKD,WAArC;AACmB,QAAA,WAAW,EAAEd,oBAAoB,CAAC,KAAKK,KAAL,CAAWE,MAAZ,CADpD;AAEmB,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE;AAFtC;AAAA;AAAA;AAAA;AAAA,cAPS;AAUZ,SAAG,KAAKF,KAAL,CAAWK;AAVF,KAAd;AAaA,wBACE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAC,GAArB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,KAAK,EAAE,KAAKL,KAAL,CAAWI,UAAjC;AAA6C,UAAA,QAAQ,EAAE,MAAM;AAAC,iBAAKE,YAAL,CAAkB,CAAlB;AAAqB;AAAnF;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGgB,OAAO,CAAC,KAAKtB,KAAL,CAAWG,SAAZ,CAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAlFwB;;AAqF3B,eAAeN,GAAf","sourcesContent":["import './style.css';\nimport { HashRouter } from 'react-router-dom';\nimport React, {Component} from 'react';\n\nimport LandingPage from './components/Landing';\nimport NavigationBar from './components/NavigationBar';\nimport ProjectCatalogue from './components/ProjectCatalogue';\n\nimport XRProjectList from './components/XRProjectList';\nimport UXProjectList from './components/UXProjectList';\nimport SWProjectList from './components/SWProjectList';\n\n\nconst ProjectCatalogueList = [XRProjectList, UXProjectList, SWProjectList]; // TODO: Based on PageID fetch the corresponding projects\nconst NavHeader = [\"Mixed Reality\", \"HCI Research\", \"Software Development\"];\n\nclass App extends Component{\n  constructor (props) {\n    super(props);\n    this.state = {\n      transitionComplete: false,\n      pageID: 0, // FOR LANDING PAGE (By default, black for nothing)\n      siteState: 0, // FOR NAVIGATION\n      headerText: \"\",  // FOR NAVIGATION DISPLAY (SYSTEM STATUS)\n      displayPage: <div></div>, // BASED ON CLICKED PROJECT CATALOGUE PAGE\n    }\n\n    this.setSiteState = this.setSiteState.bind(this);\n    this.changePageIDState = this.changePageIDState.bind(this);\n    this.viewDetails = this.viewDetails.bind(this);\n  }\n\n  handleColorChange() {\n    this.setState(() => ({\n      transitionComplete: true,\n    }))\n  }\n\n  setSiteState(newState) {\n    let oldState = this.state.siteState;\n    this.setState(() => ({\n      siteState: newState,\n    }), () => {\n      if (oldState === 2) \n        this.setState(() => ({displayPage: <div></div>}))\n      else if (newState === 1)\n        this.setState(() => ({headerText: NavHeader[this.state.pageID]}))\n      else if (newState === 0)\n        this.setState(() => ({headerText: \"\"}));\n    });\n  }\n\n  changePageIDState(newPageID) {\n    if (newPageID < 0)\n      newPageID = 2;\n    else if (newPageID > 2)\n      newPageID = 0;\n\n    console.log(\"Changing pageID to: \", newPageID);\n    this.setState(() => ({\n      pageID: newPageID%3\n    }), () => {\n      if (this.state.siteState === 0) {\n        this.child.child.swapTimeline(this.state.pageID);\n      }\n    });\n  }\n\n  viewDetails(displayPage) {\n    console.log(\"Displaying page: \", displayPage);\n    this.setState(() => ({\n      displayPage: displayPage.page,\n      headerText: displayPage.name\n    }), this.setSiteState(2));\n  }\n\n  render () {\n    let siteMap = {\n      0: <LandingPage pageID={this.state.pageID} \n                      onChange={this.changePageIDState} \n                      onRef={ref => (this.child = ref)}\n                      onViewProject={() => {this.setSiteState(1)}}\n                      transitionComplete={this.state.transitionComplete}\n                      onInit={this.handleColorChange}/>,\n      1: <ProjectCatalogue  viewDetails={this.viewDetails} \n                            projectList={ProjectCatalogueList[this.state.pageID]}\n                            pageID={this.state.pageID}/>,\n      2: this.state.displayPage\n    };\n\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <NavigationBar title={this.state.headerText} onChange={() => {this.setSiteState(0)}}/>\n          {siteMap[this.state.siteState]}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}